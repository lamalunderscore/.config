# Patch generated by Pyment v0.3.3

--- a/multi_linear_regression.py
+++ b/multi_linear_regression.py
@@ -5,37 +5,62 @@
 
 
 class MultiLinearRegression:
+    """ """
 
     def __init__(self, default_slope:float=0, default_intercept:float=0):
         self._slope = default_slope
         self._intercept = default_intercept
     
     def set_params(self, parameters:np.ndarray) -> None:
+        """
+
+        :param parameters:np.ndarray: 
+
+        """
         self._set_intercept(parameters[0])
         self._set_slope(parameters[1:])
         return
 
     def _set_intercept(self, intercept:float) -> None:
+        """
+
+        :param intercept:float: 
+
+        """
         self._intercept = intercept
         return
 
     def _set_slope(self, slope:np.ndarray) -> None:
+        """
+
+        :param slope:np.ndarray: 
+
+        """
         self._slope = slope
         return
 
     def get_params(self) -> np.ndarray:
+        """ """
         parameters = np.insert(self._slope, 0, self._intercept[0])
         return parameters
 
     def get_slope(self) -> np.ndarray:
+        """ """
         return self._slope
         
     
     def get_intercept(self) -> float:
        """
        :returns: intercept value as float
        """
         return self._intercept
 
 
     def train(self, X, y):
        """

        :param X: 
        :param y:

        """
         X_with_intercept = np.column_stack((np.ones(X.shape[0]), X))
         X_transpose = X_with_intercept.transpose()
         production = np.dot(X_transpose, X_with_intercept)
@@ -48,6 +73,11 @@
         self._set_slope(parameters[1:])
 
     def predict(self, X):
+        """
+
+        :param X: 
+
+        """
         X_with_intercept = np.column_stack((np.ones(X.shape[0]), X))
         parameters = np.insert(self.get_slope(), 0, self.get_intercept())
         return np.dot(X_with_intercept, parameters)
